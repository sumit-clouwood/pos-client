cd diversion: 2
jobs:
  build:
    branches:
      only:
        - master
        - staging
        - integration

    docker:
       - image: circleci/node:11.4.0

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "PREPARE ENVIRONMENT VARIABLES"
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "export ENVIRONMENT=production" >> $BASH_ENV
              echo "export EBENVIRONMENT=prod" >> $BASH_ENV
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD" >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              echo "export ENVIRONMENT=staging" >> $BASH_ENV
              echo "export EBENVIRONMENT=stg" >> $BASH_ENV
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD" >> $BASH_ENV
            elif [ "${CIRCLE_BRANCH}" == "integration" ] || [ "${CIRCLE_BRANCH}" == "monitoring" ]; then
              echo "export ENVIRONMENT=integration" >> $BASH_ENV
              echo "export EBENVIRONMENT=int" >> $BASH_ENV
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_INT" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_INT" >> $BASH_ENV
            fi

      - run:
          name: "PRINT CURRENT CACHE KEY"
          command: |
            cat package.json > cache_key_file
            echo "v${CACHE_ID}-dependencies-${CIRCLE_BRANCH}" >> cache_key_file

      # RESTORE NPM PACKAGES CACHE IF AVAILABLE
      - restore_cache:
          keys:
          - key-{{ checksum "cache_key_file" }}

      - run:
          name: "INSTALL NPM PACKAGES"
          command: |
            # USING YARN INSTEAD NPM FOR SPEED
            yarn install

      # SAVE NPM PACKAGES AS CACHE
      - save_cache:
          paths:
            - node_modules
          key: key-{{ checksum "cache_key_file" }}

      - run:
          name: "INSTALL DEPLOYMENT DEPENDENCIES"
          command: |
            # INSTALL AWS CLI DEPENDENCIES
            # ORIGINAL SETUP
            ##echo 'deb http://ftp.fr.debian.org/debian testing main' | sudo tee -a /etc/apt/sources.list
            ##sudo apt-get update -qq && sudo apt-get install -y python3.6 python3-pip python-dev build-essential

            # TEMPORARY DEBIAN REPO FIX
            sudo rm /etc/apt/sources.list
            echo 'deb http://ftp.fr.debian.org/debian testing main' | sudo tee -a /etc/apt/sources.list
            echo "deb http://archive.debian.org/debian/ jessie-backports main" | sudo tee -a /etc/apt/sources.list
            echo "deb-src http://archive.debian.org/debian/ jessie-backports main" | sudo tee -a /etc/apt/sources.list
            echo "Acquire::Check-Valid-Until false;" | sudo tee -a /etc/apt/apt.conf.d/10-nocheckvalid
            echo 'Package: *\nPin: origin "archive.debian.org"\nPin-Priority: 500' | sudo tee -a /etc/apt/preferences.d/10-archive-pin
            sudo apt-get update
            sudo apt-get install -y python3.6 python3-pip python-dev build-essential

            sudo pip3 install --upgrade pip
            sudo pip3 install --upgrade virtualenv

            # INSTALL AWS CLI FOR S3 COPY COMMAND
            sudo pip3 install awscli --upgrade

            # INSTALL AWS EB CLI FOR BEANSTALK DEPLOYMENT
            sudo pip3 install awsebcli --upgrade

      - run:
          name: "COPY CONFIG"
          command: |
            # COPY SETTINGS FROM S3.
            # For PROD and INT we rename the file to prod.env.js
            aws s3 cp s3://dm-config-$EBENVIRONMENT/dm-pos-$EBENVIRONMENT/env.$ENVIRONMENT .env

      - run:
          name: "BUILD APPLICATON"
          command: |
            # USING YARN INSTEAD NPM FOR SPEED
            yarn run build

      - run:
          name: "PREPARE FILES"
          command: |
            # MOVE FILES TO ALLOW BEANSTALK TO READ THEM
            cp .circleci/Dockerrun.aws.json Dockerrun.aws.json
            cp .circleci/nginx/nginx.conf nginx.conf

            # FIX ISSUE https://github.com/aws/aws-cli/issues/2639
            find ./node_modules -mtime +10950 -exec touch {} \;

      - deploy:
          name: "DEPLOY TO EB"
          command: |
            # DEPLOY TO EB
            eb use dm-pos-$EBENVIRONMENT
            eb deploy dm-pos-$EBENVIRONMENT
